#!/usr/bin/env python
import roslib; roslib.load_manifest('re_srvs')

import sys
import string
import rospy
from re_srvs import srv
from re_msgs.msg import File
import random
import time

OWL = """<?xml version="1.0"?>
<rdf:RDF xmlns="http://www.roboearth.org/kb/roboearth.owl#"
     xml:base="http://www.roboearth.org/kb/roboearth.owl"
     xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
     xmlns:owl="http://www.w3.org/2002/07/owl#"
     xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
     xmlns:comp_cop="http://ias.cs.tum.edu/kb/comp_cop.owl#"
     xmlns:knowrob="http://ias.cs.tum.edu/kb/knowrob.owl#">
    <owl:Ontology rdf:about="http://www.roboearth.org/kb/roboearth.owl#">
        <owl:imports rdf:resource="http://ias.cs.tum.edu/kb/knowrob.owl#"/>
    </owl:Ontology>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Object Properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://www.roboearth.org/kb/roboearth.owl#providesModelFor -->

    <owl:ObjectProperty rdf:about="http://www.roboearth.org/kb/roboearth.owl#providesModelFor"/>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Data properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://www.roboearth.org/kb/roboearth.owl#creationDateTime -->

    <owl:DatatypeProperty rdf:about="http://www.roboearth.org/kb/roboearth.owl#creationDateTime"/>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Classes
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://ias.cs.tum.edu/kb/knowrob.owl#bottle -->

    <owl:Class rdf:about="http://ias.cs.tum.edu/kb/knowrob.owl#bottle"/>
    


    <!-- http://www.roboearth.org/kb/roboearth.owl#ColoredPointCloudModel -->

    <owl:Class rdf:about="http://www.roboearth.org/kb/roboearth.owl#ColoredPointCloudModel"/>
    


    <!-- http://www.w3.org/2002/07/owl#Class -->

    <owl:Class rdf:about="http://www.w3.org/2002/07/owl#Class"/>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Individuals
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://ias.cs.tum.edu/kb/knowrob.owl#bottle -->

    <owl:NamedIndividual rdf:about="http://ias.cs.tum.edu/kb/knowrob.owl#bottle"/>
    


    <!-- http://www.roboearth.org/kb/roboearth.owl#ColoredPointCloudModel_12_01_12_11_59_02_414 -->

    <owl:NamedIndividual rdf:about="http://www.roboearth.org/kb/roboearth.owl#ColoredPointCloudModel_12_01_12_11_59_02_414">
        <rdf:type rdf:resource="http://www.roboearth.org/kb/roboearth.owl#ColoredPointCloudModel"/>
        <creationDateTime rdf:datatype="http://www.w3.org/2001/XMLSchema#string">12_01_12_11_59_02_414</creationDateTime>
        <providesModelFor rdf:resource="http://ias.cs.tum.edu/kb/knowrob.owl#bottle"/>
    </owl:NamedIndividual>
</rdf:RDF>



<!-- Generated by the OWL API (version 3.0.0.1413) http://owlapi.sourceforge.net -->
"""

_sizes = [3, 10, 50, 100, 500, 1000, 5000,
          10000, 50000, 100000, 500000]

def encode(byte):
    return byte-256  if byte>=128 else byte
        
def decode(byte):
    return byte+256 if byte<0 else byte

def filetoint8(filename):

    file1 = open(filename)
    h = file1.read()
    g = [encode(ord(k)) for k in h]
    file2 = File()
    file2.name = filename
    file2.data = g
    return file2

def generate(name, size):
    if size > 10:
        sample = [random.choice(string.lowercase) for _ in xrange(10)]
        s = sample*int(size/10)+['A']*(size % 10)
    else:
        s = [random.choice(string.lowercase) for _ in xrange(size)]
    g = [encode(ord(k)) for k in s]
    file2 = File()
    file2.name = name
    file2.data = g
    return file2

def benchmark_set_object():
    rospy.wait_for_service('/py_re_comm/set_object')
    name = 'toto'
    final = []
    for i in xrange(len(_sizes)):
        try:
            file1 = generate(name, _sizes[i])
            add_two_ints = rospy.ServiceProxy('/py_re_comm/set_object', srv.SetObject)
            start = time.time()
            resp = add_two_ints('bottle',name+str(i),'', OWL, (file1,), '3334736b6e6179616da12cfc2c2224378a8cc74d37a2be17420cf6dfd5')
            end = time.time()
            final.append(end-start)
        except rospy.ServiceException, e:
            print "Service call failed: %s"%e
    return final

def benchmark_get_object():
    rospy.wait_for_service('/py_re_comm/get_object')
    name = 'toto'
    final = []
    for i in xrange(len(_sizes)):
        try:
            add_two_ints = rospy.ServiceProxy('/py_re_comm/get_object', srv.GetObject)
            start = time.time()
            resp = add_two_ints('bottle.'+name+str(i))
            end = time.time()
            final.append(end-start)
        except rospy.ServiceException, e:
            print "Service call failed: %s"%e
    return final

def undo_benchmark_set_object():
    rospy.wait_for_service('/py_re_comm/del_object')
    name = 'toto'
    
    for i in xrange(len(_sizes)):
        try:
            add_two_ints = rospy.ServiceProxy('/py_re_comm/del_object', srv.DelObject)
            resp = add_two_ints('bottle.'+name+str(i), '3334736b6e6179616da12cfc2c2224378a8cc74d37a2be17420cf6dfd5')
        except rospy.ServiceException, e:
            print "Service call failed: %s"%e


def int8tofile(bytess):
    g = [chr(decode(k)) for k in bytess]
    return g

def set_recipe():
    rospy.wait_for_service('/py_re_comm/set_action_recipe')
    try:
        add_two_ints = rospy.ServiceProxy('/py_re_comm/set_action_recipe', srv.SetActionRecipe)
        resp = add_two_ints('bottlsdsd','vd8su8adanilad5faces','', OWL, '3334736b6e6179616da12cfc2c2224378a8cc74d37a2be17420cf6dfd5')
        return resp
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e

def get_recipe():
    rospy.wait_for_service('/py_re_comm/get_action_recipe')
    try:
        add_two_ints = rospy.ServiceProxy('/py_re_comm/get_action_recipe', srv.GetActionRecipe)
        resp = add_two_ints('bottle.vanilfa5faces')
        return resp
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e

def update_recipe():
    rospy.wait_for_service('/py_re_comm/update_action_recipe')
    try:
        add_two_ints = rospy.ServiceProxy('/py_re_comm/update_action_recipe', srv.UpdateActionRecipe)
        resp = add_two_ints('dialoguetest.dialoguetest', 'adfd', OWL, '3334736b6e6179616da12cfc2c2224378a8cc74d37a2be17420cf6dfd5')
        return resp
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e

def del_recipe():
    rospy.wait_for_service('/py_re_comm/del_action_recipe')
    try:
        add_two_ints = rospy.ServiceProxy('/py_re_comm/del_action_recipe', srv.DelActionRecipe)
        resp = add_two_ints('bottle6.v6anila5faces','3334736b6e6179616da12cfc2c2224378a8cc74d37a2be17420cf6dfd5')
        return resp
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e


def set_environment():
    file1 = filetoint8('terrain.m')
    file2 = filetoint8('my_terrian.png')

    rospy.wait_for_service('/py_re_comm/set_environment')
    try:
        add_two_ints = rospy.ServiceProxy('/py_re_comm/set_environment', srv.SetEnvironment)
        resp = add_two_ints('robottle','vdanila5faces','', OWL, '', '3334736b6e6179616da12cfc2c2224378a8cc74d37a2be17420cf6dfd5')
        return resp
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e

def get_environment():
    rospy.wait_for_service('/py_re_comm/get_environment')
    try:
        add_two_ints = rospy.ServiceProxy('/py_re_comm/get_environment', srv.GetEnvironment)
        resp = add_two_ints('demp_map.coffee')
        return resp
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e

def update_environment():
    rospy.wait_for_service('/py_re_comm/update_environment')
    try:
        add_two_ints = rospy.ServiceProxy('/py_re_comm/update_environment', srv.UpdateEnvironment)
        resp = add_two_ints('dialoguetest.dialoguetest', 'adfd', OWL, '3334736b6e6179616da12cfc2c2224378a8cc74d37a2be17420cf6dfd5')
        return resp
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e
        
def del_environment():
    rospy.wait_for_service('/py_re_comm/del_environment')
    try:
        add_two_ints = rospy.ServiceProxy('/py_re_comm/del_environment', srv.DelEnvironment)
        resp = add_two_ints('demo_map.kitkat','3334736b6e6179616da12cfc2c2224378a8cc74d37a2be17420cf6dfd5')
        return resp
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e

def set_object():
    #file1 = filetoint8('terrain.m')
    #file2 = filetoint8('my_terrian.png')
    file1 = generate('asd', 3)
    rospy.wait_for_service('/re_comm/set_object')
    try:
        add_two_ints = rospy.ServiceProxy('/re_comm/set_object', srv.SetObject)
        resp = add_two_ints('bottle','vanila5faces2','', OWL, (file1,), '3334736b6e6179616da12cfc2c2224378a8cc74d37a2be17420cf6dfd5')
        return resp
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e

def get_object():
    rospy.wait_for_service('/py_re_comm/get_object')
    try:
        add_two_ints = rospy.ServiceProxy('/py_re_comm/get_object', srv.GetObject)
        resp = add_two_ints('dd.d')
        return resp
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e

def update_object():
    rospy.wait_for_service('/py_re_comm/update_object')
    try:
        add_two_ints = rospy.ServiceProxy('/py_re_comm/update_object', srv.UpdateObject)
        resp = add_two_ints('dd.d', 'adfd', OWL, '3334736b6e6179616da12cfc2c2224378a8cc74d37a2be17420cf6dfd5')
        return resp
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e

def del_object():
    rospy.wait_for_service('/py_re_comm/del_object')
    try:
        add_two_ints = rospy.ServiceProxy('/py_re_comm/del_object', srv.DelObject)
        resp = add_two_ints('demo_map.kitkat','3334736b6e6179616da12cfc2c2224378a8cc74d37a2be17420cf6dfd5')
        return resp
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e


if __name__ == "__main__":
    
    get = []
    set1 = []

    j = benchmark_set_object()
    set1.append(j)
    k = benchmark_get_object()
    get.append(k)
    undo_benchmark_set_object()
    print _sizes
    print get
    print set1
    
